// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  Review        Review[]
  role          Role      @default(USER)

  @@map("users")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId], map: "provider_id_provider_account_id_unique")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token], map: "identifier_token")
  @@map("verification_requests")
}

model Review {
  id         String   @id @default(cuid())
  content    String
  rating     Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([propertyId])
  @@index([userId])
  @@map("reviews")
}

model Property {
  id          String   @id @default(cuid())
  name        String
  description String
  images      Json // Array of { publicId: string, imageUrl: string }
  status      String // "development" | "construction" | "completed" | "sale" | "rent" | "sold"
  location    String
  price       Float
  slug        String   @unique
  rooms       Json? // Stores array of room objects: { name, publicId, imageUrl }[]
  type        String?
  beds        Int?
  baths       Int?
  squareFeet  Int?
  amenities   String[]
  address     String?
  features    String[]
  virtualTour Boolean?
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("properties")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}
